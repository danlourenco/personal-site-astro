---
import Container from './Container.astro';
import { Image } from 'astro:assets';
import avatarImage from '../images/avatar.png';

const pathname = Astro.url.pathname;
const isHomePage = pathname === '/';

interface NavItem {
  href: string;
  label: string;
}

const navItems: NavItem[] = [
  { href: '/about', label: 'About' },
  { href: '/articles', label: 'Articles' },
  // { href: '/projects', label: 'Projects' },
  // { href: '/speaking', label: 'Speaking' },
  { href: '/uses', label: 'Uses' },
];
---

<header class="pointer-events-none relative z-50 flex flex-none flex-col">
  {isHomePage && (
    <Container class="top-0 order-last -mb-3 pt-3">
      <div class="relative">
        <a href="/" aria-label="Home" class="pointer-events-auto">
          <Image
            src={avatarImage}
            alt=""
            width={256}
            height={256}
            quality={95}
            class="h-16 w-16 rounded-full bg-zinc-100 object-cover object-top dark:bg-zinc-800"
          />
        </a>
      </div>
    </Container>
  )}
  
  <div class="top-0 z-10 h-16 pt-6">
    <Container class="w-full">
      <div class="relative flex gap-4">
        <div class="flex flex-1">
          {!isHomePage && (
            <div class="h-10 w-10 rounded-full bg-white/90 p-0.5 shadow-lg ring-1 shadow-zinc-800/5 ring-zinc-900/5 backdrop-blur-sm dark:bg-zinc-800/90 dark:ring-white/10">
              <a href="/" aria-label="Home" class="pointer-events-auto">
                <Image
                  src={avatarImage}
                  alt=""
                  width={144}
                  height={144}
                  quality={95}
                  class="h-9 w-9 rounded-full bg-zinc-100 object-cover object-top dark:bg-zinc-800"
                />
              </a>
            </div>
          )}
        </div>
        
        <div class="flex flex-1 justify-end md:justify-center">
          <!-- Desktop Navigation -->
          <nav class="pointer-events-auto hidden md:block">
            <ul class="flex rounded-full bg-white/90 px-3 text-sm font-medium text-zinc-800 shadow-lg ring-1 shadow-zinc-800/5 ring-zinc-900/5 backdrop-blur-sm dark:bg-zinc-800/90 dark:text-zinc-200 dark:ring-white/10">
              {navItems.map((item) => (
                <li>
                  <a
                    href={item.href}
                    class={`relative block px-3 py-2 transition ${
                      pathname === item.href
                        ? 'text-teal-500 dark:text-teal-400'
                        : 'hover:text-teal-500 dark:hover:text-teal-400'
                    }`}
                  >
                    {item.label}
                    {pathname === item.href && (
                      <span class="absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-teal-500/0 via-teal-500/40 to-teal-500/0 dark:from-teal-400/0 dark:via-teal-400/40 dark:to-teal-400/0" />
                    )}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
          
          <!-- Mobile Navigation - Simplified for now -->
          <nav class="pointer-events-auto md:hidden">
            <details class="relative">
              <summary class="group flex items-center rounded-full bg-white/90 px-4 py-2 text-sm font-medium text-zinc-800 shadow-lg ring-1 shadow-zinc-800/5 ring-zinc-900/5 backdrop-blur-sm dark:bg-zinc-800/90 dark:text-zinc-200 dark:ring-white/10 dark:hover:ring-white/20 cursor-pointer">
                Menu
                <svg class="ml-3 h-auto w-2 stroke-zinc-500 group-hover:stroke-zinc-700 dark:group-hover:stroke-zinc-400" viewBox="0 0 8 6" aria-hidden="true">
                  <path d="M1.75 1.75 4 4.25l2.25-2.5" fill="none" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
              </summary>
              <div class="absolute right-0 top-full mt-2 w-48 rounded-3xl bg-white p-8 ring-1 ring-zinc-900/5 dark:bg-zinc-900 dark:ring-zinc-800">
                <nav class="mt-6">
                  <ul class="-my-2 divide-y divide-zinc-100 text-base text-zinc-800 dark:divide-zinc-100/5 dark:text-zinc-300">
                    {navItems.map((item) => (
                      <li>
                        <a href={item.href} class="block py-2">{item.label}</a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            </details>
          </nav>
        </div>
        
        <div class="flex justify-end md:flex-1">
          <div class="pointer-events-auto">
            <!-- Theme Toggle -->
            <button
              id="theme-toggle"
              type="button"
              aria-label="Toggle theme"
              class="group cursor-pointer rounded-full bg-white/90 px-3 py-2 shadow-lg ring-1 shadow-zinc-800/5 ring-zinc-900/5 backdrop-blur-sm transition dark:bg-zinc-800/90 dark:ring-white/10 dark:hover:ring-white/20"
            >
              <!-- Sun Icon -->
              <svg id="sun-icon" class="h-6 w-6 fill-zinc-100 stroke-zinc-500 transition group-hover:fill-zinc-200 group-hover:stroke-zinc-700 dark:hidden" viewBox="0 0 24 24" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                <path d="M8 12.25A4.25 4.25 0 0 1 12.25 8v0a4.25 4.25 0 0 1 4.25 4.25v0a4.25 4.25 0 0 1-4.25 4.25v0A4.25 4.25 0 0 1 8 12.25v0Z" />
                <path d="M12.25 3v1.5M21.5 12.25H20M18.791 18.791l-1.06-1.06M18.791 5.709l-1.06 1.06M12.25 20v1.5M4.5 12.25H3M6.77 6.77 5.709 5.709M6.77 17.73l-1.061 1.061" fill="none" />
              </svg>
              <!-- Moon Icon -->
              <svg id="moon-icon" class="hidden h-6 w-6 fill-zinc-700 stroke-zinc-500 transition dark:block" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M17.25 16.22a6.937 6.937 0 0 1-9.47-9.47 7.451 7.451 0 1 0 9.47 9.47ZM12.75 7C17 7 17 2.75 17 2.75S17 7 21.25 7C17 7 17 11.25 17 11.25S17 7 12.75 7Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </Container>
  </div>
</header>

<script>
  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    if (isDark) {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    } else {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    }
  }

  // Add event listener to theme toggle button
  function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
  }

  // Run when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupThemeToggle);
  } else {
    setupThemeToggle();
  }
</script>